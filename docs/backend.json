{
  "entities": {
    "Entry": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Entry",
      "type": "object",
      "description": "Represents a single transaction entry (purchase, sale, or expense).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the entry."
        },
        "type": {
          "type": "string",
          "description": "The type of entry (purchase, sale, or expense).",
          "format": "string"
        },
        "quantity": {
          "type": "number",
          "description": "The quantity of items in the entry."
        },
        "price": {
          "type": "number",
          "description": "The price per item or the total value of the expense."
        },
        "supplier": {
          "type": "string",
          "description": "The name of the supplier (if applicable)."
        },
        "timestamp": {
          "type": "string",
          "description": "The timestamp of when the entry was created.",
          "format": "date-time"
        },
        "synced": {
          "type": "boolean",
          "description": "Indicates whether the entry has been synchronized with Firestore."
        },
        "categoryId": {
          "type": "string",
          "description": "Reference to Category. (Relationship: Category 1:N Entry)"
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Entry)"
        }
      },
      "required": [
        "id",
        "type",
        "quantity",
        "price",
        "timestamp",
        "synced",
        "categoryId",
        "userId"
      ]
    },
    "Category": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Category",
      "type": "object",
      "description": "Represents a category for entries (e.g., raw materials, transportation).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the category."
        },
        "name": {
          "type": "string",
          "description": "The name of the category."
        },
        "emoji": {
          "type": "string",
          "description": "Emoji associated with the category for visual representation."
        }
      },
      "required": [
        "id",
        "name",
        "emoji"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "roleId": {
          "type": "string",
          "description": "Reference to Role. (Relationship: User 1:1 Role)"
        }
      },
      "required": [
        "id",
        "email",
        "roleId"
      ]
    },
    "Role": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Role",
      "type": "object",
      "description": "Represents a role within the application (e.g., Admin, Worker).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the role."
        },
        "name": {
          "type": "string",
          "description": "The name of the role."
        },
        "permissions": {
          "type": "array",
          "description": "List of permissions granted to the role",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "name"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user information. The 'userId' is the Firebase Authentication UID.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user, corresponding to the Firebase Auth UID."
            }
          ]
        }
      },
      {
        "path": "roles/{roleId}",
        "definition": {
          "entityName": "Role",
          "schema": {
            "$ref": "#/backend/entities/Role"
          },
          "description": "Stores role information. Used for role-based access control.  It stores the Roles definitions such as admin, worker, etc.",
          "params": [
            {
              "name": "roleId",
              "description": "The unique identifier of the role."
            }
          ]
        }
      },
      {
        "path": "categories/{categoryId}",
        "definition": {
          "entityName": "Category",
          "schema": {
            "$ref": "#/backend/entities/Category"
          },
          "description": "Stores categories for entries.",
          "params": [
            {
              "name": "categoryId",
              "description": "The unique identifier of the category."
            }
          ]
        }
      },
      {
        "path": "entries/{entryId}",
        "definition": {
          "entityName": "Entry",
          "schema": {
            "$ref": "#/backend/entities/Entry"
          },
          "description": "Stores entries (purchases, sales, expenses). Includes denormalized 'userId' for authorization independence.",
          "params": [
            {
              "name": "entryId",
              "description": "The unique identifier of the entry."
            }
          ]
        }
      },
      {
        "path": "transactions/{transactionId}",
        "definition": {
          "entityName": "Transaction",
          "description": "Stores aggregated transaction summaries (sales, purchases, expenses).",
          "params": [
            {
              "name": "transactionId",
              "description": "The unique identifier of the transaction."
            }
          ]
        }
      },
       {
        "path": "sales_entries/{salesEntryId}",
        "definition": {
          "entityName": "SalesEntry",
          "description": "Stores individual sales entries made by workers.",
          "params": [
            {
              "name": "salesEntryId",
              "description": "The unique identifier of the sales entry."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support the Tarpaulin Business App, focusing on offline capabilities, role-based access, and real-time profit/loss calculations. It follows the principles of Authorization Independence (denormalization), Structural Segregation (homogeneous security posture), and Access Modeling. User data, categories, entries, and roles are stored in separate collections for clear organization and security. Crucially, the `userId` is denormalized within the `entries` collection to ensure that entries are always associated with a specific user, and therefore avoid the use of `get()` calls in security rules for ownership verification, and the separation of data into `/users/{userId}/entries/{entryId}` supports QAPs as listing entries can be constrained to a specific user."
  }
}