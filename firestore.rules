/**
 * @file Firestore Security Rules for Tarpaulin Manager App
 * @core_philosophy This ruleset enforces a role-based access control system, with admins having elevated privileges. User-specific data is secured via path-based ownership.
 * @data_structure The database structure includes user profiles (`/users/{userId}`), admin roles (`/roles_admin/{userId}`), user entries (`/users/{userId}/entries/{entryId}`), suppliers (`/suppliers/{supplierId}`), categories (`/categories/{categoryId}`), and sales entries (`/sales_entries/{entryId}`).
 * @key_security_decisions Admin privileges are determined by the presence of a document in the `/roles_admin/{userId}` collection. User entries are secured using path-based ownership and the user ID is duplicated inside the document. Public read access is granted to `suppliers` and `categories`, while write access is restricted to admins. `list` operations are secured based on the specific collection and user role.
 * @denormalization_for_authorization Admin status is determined by the existence of a document at `/roles_admin/{userId}` instead of reading the user document.
 * @structural_segregation User entries are segregated under the `/users/{userId}` path, providing clear ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Authenticated users can read/write their own profile data, while admins can update or delete any profile.
     * @path /users/{userId}
     * @allow (get, list) User with ID 'user123' can read their own profile.
     * @allow (create) User with ID 'user123' can create their profile.
     * @deny (update, delete) User with ID 'user123' cannot update or delete another user's profile.
     * @principle Enforces user-ownership for read/write and admin-only access for update/delete.
     */
    match /users/{userId} {
      /**
       * @description Checks if the request is made by an admin by verifying the existence of their userId in /roles_admin/{userId}
       * @return {bool} - Returns true if request.auth.uid exists in /roles_admin/{userId}, otherwise returns false
       */
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      /**
       * @description Checks if a user is signed in.
       * @return {bool} - Returns true if request.auth is not null, otherwise returns false.
       */
      function isSignedIn() {
        return request.auth != null;
      }
      /**
       * @description Checks if the request comes from the owner.
       * @param {string} userId - The user ID to check against the request's authentication UID.
       * @return {bool} - Returns true if request.auth.uid matches the provided userId, otherwise returns false.
       */
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages admin roles. Only existing admins can manage other admin roles.
     * @path /roles_admin/{userId}
     * @allow (get, list) Admin user with ID 'admin123' can read the list of admin roles.
     * @allow (create, update, delete) Admin user with ID 'admin123' can create, update or delete admin roles.
     * @deny (create, update, delete) Non-admin user with ID 'user123' cannot create, update or delete admin roles.
     * @principle Restricts admin role management to existing admins.
     */
    match /roles_admin/{userId} {
      /**
       * @description Checks if the request is made by an admin by verifying the existence of their userId in /roles_admin/{userId}
       * @return {bool} - Returns true if request.auth.uid exists in /roles_admin/{userId}, otherwise returns false
       */
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages user-specific entries (purchases, sales, expenses). Only the user owning the data can read/write.
     * @path /users/{userId}/entries/{entryId}
     * @allow (get, list) User with ID 'user123' can read the list of their own entries.
     * @allow (create) User with ID 'user123' can create a new entry under their user profile.
     * @deny (update, delete) User with ID 'user123' cannot update or delete another user's entries.
     * @principle Enforces strict path-based ownership for user entries.
     */
    match /users/{userId}/entries/{entryId} {
      /**
       * @description Checks if the request is made by an admin by verifying the existence of their userId in /roles_admin/{userId}
       * @return {bool} - Returns true if request.auth.uid exists in /roles_admin/{userId}, otherwise returns false
       */
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      /**
       * @description Checks if a user is signed in.
       * @return {bool} - Returns true if request.auth is not null, otherwise returns false.
       */
      function isSignedIn() {
        return request.auth != null;
      }
      /**
       * @description Checks if the request comes from the owner.
       * @param {string} userId - The user ID to check against the request's authentication UID.
       * @return {bool} - Returns true if request.auth.uid matches the provided userId, otherwise returns false.
       */
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages supplier information. Public read access, but only admins can create, update, or delete suppliers.
     * @path /suppliers/{supplierId}
     * @allow (get, list) Any user can read the list of suppliers.
     * @deny (create, update, delete) Non-admin users cannot create, update or delete supplier information.
     * @principle Public read access with admin-only write access.
     */
    match /suppliers/{supplierId} {
      /**
       * @description Checks if the request is made by an admin by verifying the existence of their userId in /roles_admin/{userId}
       * @return {bool} - Returns true if request.auth.uid exists in /roles_admin/{userId}, otherwise returns false
       */
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      /**
       * @description Checks if a user is signed in.
       * @return {bool} - Returns true if request.auth is not null, otherwise returns false.
       */
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages categories for suppliers. Public read access, but only admins can create, update, or delete categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read the list of categories.
     * @deny (create, update, delete) Non-admin users cannot create, update or delete category information.
     * @principle Public read access with admin-only write access.
     */
    match /categories/{categoryId} {
      /**
       * @description Checks if the request is made by an admin by verifying the existence of their userId in /roles_admin/{userId}
       * @return {bool} - Returns true if request.auth.uid exists in /roles_admin/{userId}, otherwise returns false
       */
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      /**
       * @description Checks if a user is signed in.
       * @return {bool} - Returns true if request.auth is not null, otherwise returns false.
       */
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update, delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages sales entries. Any authenticated user can create entries, but only admins can modify them.
     * @path /sales_entries/{entryId}
     * @allow (get, list) Any signed-in user can read the list of sales entries.
     * @allow (create) Any signed-in user can create a new sales entry.
     * @deny (update, delete) Non-admin users cannot update or delete sales entries.
     * @principle Allows any authenticated user to create sales entries, with admin-only modification rights.
     */
    match /sales_entries/{entryId} {
      /**
       * @description Checks if the request is made by an admin by verifying the existence of their userId in /roles_admin/{userId}
       * @return {bool} - Returns true if request.auth.uid exists in /roles_admin/{userId}, otherwise returns false
       */
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      /**
       * @description Checks if a user is signed in.
       * @return {bool} - Returns true if request.auth is not null, otherwise returns false.
       */
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isAdmin() && resource != null;
    }
  }
}