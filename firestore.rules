/**
 * @fileoverview Firestore Security Rules for the Tarpaulin Business App.
 *
 * Core Philosophy:
 * This ruleset enforces role-based access control, with "admin" and "worker" roles.
 * Admins have full access to all data, while workers are restricted to creating and reading `sales_entries`.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, keyed by Firebase Auth UID.  The `roleId` field is crucial for determining user permissions.
 * - /roles/{roleId}: Stores role definitions (e.g., "admin", "worker"), including a list of allowed permissions.
 * - /categories/{categoryId}: Stores categories for entries. Publicly readable.
 * - /entries/{entryId}: Stores individual transaction entries, including a `userId` field for ownership.
 * - /transactions/{transactionId}: Stores aggregated transaction summaries.
 * - /sales_entries/{salesEntryId}: Stores individual sales entries made by workers.
 *
 * Key Security Decisions:
 * - Role-Based Access: Permissions are determined by the user's `roleId` in their `/users/{userId}` document.
 * - No User Listing: Listing all users is disallowed for security reasons.
 * - Public Categories: The `/categories` collection is publicly readable.
 * - Admin Override: Admins have full access to all data and operations.
 *
 * Denormalization for Authorization:
 * - The `entries` collection denormalizes the `userId` field to enable owner-based rules without additional reads. This approach also applies to other collections.
 *
 * Structural Segregation:
 * - The `sales_entries` collection is separated from the main `entries` collection to enforce different security postures for worker-generated data vs. admin-managed data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     */
    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/roles/admin).data.permissions is list && 'admin' in get(/databases/$(database)/documents/roles/admin).data.permissions;
    }

    /**
     * @description Checks if the user has the 'worker' role.
     */
    function isWorker() {
      return isSignedIn() && get(/databases/$(database)/documents/roles/worker).data.permissions is list && 'worker' in get(/databases/$(database)/documents/roles/worker).data.permissions;
    }

    /**
     * @description Checks if the user is the owner of the document based on the `userId` field in the document.
     * @param {string} userId The user ID to compare against.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the EXISTING document.
     * @param {string} userId The user ID to compare against.
     */
    function isExistingOwner(userId) {
      return isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (get) If the user is an admin.
     * @allow (create) If the user is an admin.
     * @deny (get) If the user is not an admin.
     * @principle Enforces admin-only access to user profiles.
     */
    match /users/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /roles/{roleId} collection.
     * @path /roles/{roleId}
     * @allow (get) If the user is an admin.
     * @allow (create) If the user is an admin.
     * @deny (get) If the user is not an admin.
     * @principle Enforces admin-only management of roles.
     */
    match /roles/{roleId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /categories/{categoryId} collection.
     * @path /categories/{categoryId}
     * @allow (get) Everyone can read categories.
     * @allow (create) If the user is an admin.
     * @deny (create) If the user is not an admin.
     * @principle Allows public read access to categories, restricts writes to admins.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /entries/{entryId} collection.
     * @path /entries/{entryId}
     * @allow (get) If the user is an admin or the owner of the entry.
     * @allow (create) If the user is an admin.
     * @deny (create) If the user is not an admin.
     * @principle Enforces admin-only access for most operations, with owner read access.
     */
    match /entries/{entryId} {
      allow get: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid);
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for the /transactions/{transactionId} collection.
     * @path /transactions/{transactionId}
     * @allow (get) If the user is an admin.
     * @allow (create) If the user is an admin.
     * @deny (create) If the user is not an admin.
     * @principle Enforces admin-only access to transaction summaries.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Rules for the /sales_entries/{salesEntryId} collection.
      * @path /sales_entries/{salesEntryId}
      * @allow (create) If the user is signed in.
      * @allow (get) If the user is signed in
      * @allow (update) If the user is an admin.
      * @allow (delete) If the user is an admin.
      * @deny (create) If the user is not signed in.
      * @principle Allows workers to create sales entries, restricts modifications to admins.
      */
    match /sales_entries/{salesEntryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}