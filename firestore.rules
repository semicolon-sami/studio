/**
 * @fileoverview Firestore Security Rules for Tarpaulin Business App
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for entries and leverages role-based access control where needed.
 * Data is segregated into top-level collections for clear authorization boundaries.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; 'userId' matches the Firebase Auth UID.
 * - /roles/{roleId}: Stores role definitions (e.g., admin, worker).
 * - /categories/{categoryId}: Stores entry categories.
 * - /entries/{entryId}: Stores transaction entries; includes a denormalized 'userId' for ownership checks.
 * - /transactions/{transactionId}: Stores aggregated transaction summaries.
 * - /sales_entries/{salesEntryId}: Stores individual sales entries.
 *
 * Key Security Decisions:
 * - User listing is disabled for privacy.
 * - Entries are strictly user-owned, enforced via the 'userId' field.
 * - Role-based access is used for privileged operations.
 *
 * Denormalization for Authorization:
 * - The `entries` collection denormalizes the `userId` to enable efficient ownership checks without needing extra `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user documents based on ownership.
     * @path /users/{userId}
     * @allow (create) User 'WlfCFBPzc0egM7tmsu6DqEulp503' can create their own user document at /users/WlfCFBPzc0egM7tmsu6DqEulp503
     * @deny (create) User 'WlfCFBPzc0egM7tmsu6DqEulp503' cannot create a user document at /users/another_user_id
     * @allow (get, list) User 'WlfCFBPzc0egM7tmsu6DqEulp503' can read their own user document at /users/WlfCFBPzc0egM7tmsu6DqEulp503
     * @deny (get, list) User 'WlfCFBPzc0egM7tmsu6DqEulp503' cannot read another user document at /users/another_user_id
     * @allow (update, delete) User 'WlfCFBPzc0egM7tmsu6DqEulp503' can update/delete their own user document at /users/WlfCFBPzc0egM7tmsu6DqEulp503
     * @deny (update, delete) User 'WlfCFBPzc0egM7tmsu6DqEulp503' cannot update/delete another user document at /users/another_user_id
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disabled.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants read access to roles and restricts write access.
     * @path /roles/{roleId}
     * @allow (get, list) Any user can read roles.
     * @deny (create, update, delete) No user can create, update, or delete roles.
     * @principle Restricts write access to roles, allowing only read access for all users.
     */
    match /roles/{roleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants read access to categories and restricts write access.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read categories.
     * @deny (create, update, delete) No user can create, update, or delete categories.
     * @principle Restricts write access to categories, allowing only read access for all users.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to entries based on ownership.
     * @path /entries/{entryId}
     * @allow (create) User 'WlfCFBPzc0egM7tmsu6DqEulp503' can create an entry with userId 'WlfCFBPzc0egM7tmsu6DqEulp503'.
     * @deny (create) User 'WlfCFBPzc0egM7tmsu6DqEulp503' cannot create an entry with userId 'another_user_id'.
     * @allow (get, list) User 'WlfCFBPzc0egM7tmsu6DqEulp503' can read their own entries.
     * @deny (get, list) User 'WlfCFBPzc0egM7tmsu6DqEulp503' cannot read entries owned by another user.
     * @allow (update, delete) User 'WlfCFBPzc0egM7tmsu6DqEulp503' can update/delete their own existing entries.
     * @deny (update, delete) User 'WlfCFBPzc0egM7tmsu6DqEulp503' cannot update/delete entries owned by another user.
     * @principle Enforces document ownership and validates relational integrity on create.
     */
    match /entries/{entryId} {
      allow get: if isEntryOwner(resource.data.userId);
      allow list: if isEntryOwner(resource.data.userId);
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update: if isExistingEntryOwner(resource.data.userId);
      allow delete: if isExistingEntryOwner(resource.data.userId);
    }

    /**
     * @description Grants read access to transactions and restricts write access.
     * @path /transactions/{transactionId}
     * @allow (get, list) Any user can read transactions.
     * @deny (create, update, delete) No user can create, update, or delete transactions.
     * @principle Restricts write access to transactions, allowing only read access for all users.
     */
    match /transactions/{transactionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants read access to sales entries and restricts write access.
     * @path /sales_entries/{salesEntryId}
     * @allow (get, list) Any user can read sales entries.
     * @deny (create, update, delete) No user can create, update, or delete sales entries.
     * @principle Restricts write access to sales entries, allowing only read access for all users.
     */
    match /sales_entries/{salesEntryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isEntryOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingEntryOwner(userId) {
        return isSignedIn() && request.auth.uid == userId && resource != null;
  }
}