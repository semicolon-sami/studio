/**
 * @fileOverview
 * This ruleset enforces a role-based and ownership-based access control model for the Tarpaulin Manager app.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /roles_admin/{userId}: Presence of a document grants admin privileges to the user.
 * - /users/{userId}/entries/{entryId}: Stores user-specific entries, accessible only to the owning user.
 * - /suppliers/{supplierId}: Stores supplier information, publicly readable, but only admins can modify.
 * - /categories/{categoryId}: Stores categories, publicly readable, but only admins can modify.
 * - /sales_entries/{entryId}: Stores sales entries, any authenticated user can create, only admins can modify.
 *
 * Key Security Decisions:
 * - Admin privileges are determined by the presence of a document in the /roles_admin/{userId} collection.
 * - User entries are secured using path-based ownership.
 * - Public read access is granted to /suppliers and /categories.
 * - Sales entries can be created by any authenticated user but are restricted to admin modification.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the existence of a document in `/roles_admin/{userId}`, avoiding `get()` calls on user documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own user profile.
     * @path /users/{userId}
     * @allow (get, update, delete) if the user is signed in and the userId matches the document ID.
     * @allow (create) if the user is signed in and the userId matches the requested userId.
     * @deny (get, update, delete) if the user is not signed in or the userId does not match.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants admin privileges to a user by creating a document in this collection.
     * @path /roles_admin/{userId}
     * @allow (create) if the request is authenticated (typically done via a trusted backend).
     * @allow (get, list) if the user is signed in and the userId matches the document ID.
     * @deny (get, list) if the user is not signed in or the userId does not match.
     * @deny (update, delete) to prevent unauthorized modification of admin roles.
     * @principle Role-based access control: presence of a document grants admin status.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own entries.
     * @path /users/{userId}/entries/{entryId}
     * @allow (get, list, create, update, delete) if the user is signed in and the userId matches the parent document ID.
     * @deny (get, list, create, update, delete) if the user is not signed in or the userId does not match.
     * @principle Path-based ownership: only the user can access their own entries.
     */
    match /users/{userId}/entries/{entryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to suppliers, but restricts write access to admins.
     * @path /suppliers/{supplierId}
     * @allow (get, list) to anyone.
     * @allow (create, update, delete) only if the request is made by an admin.
     * @deny (create, update, delete) if the request is not made by an admin.
     * @principle Role-based access control combined with public read access.
     */
    match /suppliers/{supplierId} {
      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to categories, but restricts write access to admins.
     * @path /categories/{categoryId}
     * @allow (get, list) to anyone.
     * @allow (create, update, delete) only if the request is made by an admin.
     * @deny (create, update, delete) if the request is not made by an admin.
     * @principle Role-based access control combined with public read access.
     */
    match /categories/{categoryId} {
       function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows any authenticated user to create sales entries, but restricts modification and deletion to admins.
     * @path /sales_entries/{entryId}
     * @allow (get, list) only if the request is made by an admin.
     * @allow (create) if the request is made by an authenticated user.
     * @allow (update, delete) only if the request is made by an admin.
     * @deny (update, delete) if the request is not made by an admin.
     * @principle Role-based access control combined with authenticated creation.
     */
    match /sales_entries/{entryId} {
       function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}