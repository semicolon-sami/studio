/**
 * @fileoverview Firestore Security Rules for Tarpaulin Business App.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for entries, categories and users, allowing each user to manage their own data. Roles are defined, but not actively used beyond data segregation.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. 'userId' matches the Firebase Auth UID.
 * - /roles/{roleId}: Stores role definitions (e.g., Admin, Worker).
 * - /categories/{categoryId}: Stores categories for entries.
 * - /entries/{entryId}: Stores transaction entries, with a denormalized 'userId' field.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own entries.
 * - Users can only read category and role documents.
 * - Listing of all users is disallowed for privacy.
 * - The rules prioritize authorization independence by denormalizing the `userId` in the `/entries` collection, avoiding costly `get()` operations.
 *
 * Denormalization for Authorization:
 * - The `entries` collection includes a `userId` field, denormalized from the user's profile, to facilitate ownership checks without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own user profile.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User can only read, update, or delete their own profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (list) Listing all users is not allowed.
     * @principle Enforces document ownership for user profiles and prevents unauthorized access.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow get, update, delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow list: if false;
    }

    /**
     * @description Allows anyone to read role information, but restricts creation, update, and deletion.
     * @path /roles/{roleId}
     * @allow (get, list) Anyone can read the roles.
     * @deny (create, update, delete) No one can create, update, or delete roles.
     * @principle Roles are read-only and managed by administrators only.
     */
    match /roles/{roleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read category information, but restricts creation, update, and deletion.
     * @path /categories/{categoryId}
     * @allow (get, list) Anyone can read the categories.
     * @deny (create, update, delete) No one can create, update, or delete categories.
     * @principle Categories are read-only and managed by administrators only.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows users to manage their own entries.
     * @path /entries/{entryId}
     * @allow (create) User can create a new entry if the userId matches.
     * @allow (get, list) User can only read and list entries belonging to them.
     * @allow (update, delete) User can only update or delete their own entries, and only if the entry exists.
     * @deny (create) User cannot create an entry with a mismatched userId.
     * @principle Enforces document ownership for entries and prevents unauthorized modification.
     */
    match /entries/{entryId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if isSignedIn() && isOwner(request.auth.uid);
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource, and the resource exists.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}