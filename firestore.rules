rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper functions ---
    /**
     * @description Checks if the requesting user has the 'admin' role.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return get(/databases/$(database)/documents/roles_admin/$(request.auth.uid)).data != null;
    }

    /**
     * @description Checks if the requesting user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the existing resource.
     * @param {string} userId The user ID to compare against the resource's userId.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    // --- Users collection ---
    /**
     * @description Manages user profiles, accessible only to admins.
     * @path /users/{userId}
     * @allow (get, list, create, update, delete) An admin can perform any operation.
     * @deny (get, list, create, update, delete) A non-admin user cannot perform any operation.
     * @principle Role-based access control.
     */
    match /users/{userId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // --- Admin roles collection ---
    /**
     * @description Manages admin role assignments, accessible only to admins.
     * @path /roles_admin/{userId}
     * @allow (get, list, create, update, delete) An admin can perform any operation.
     * @deny (get, list, create, update, delete) A non-admin user cannot perform any operation.
     * @principle Role-based access control.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // --- Entries under users ---
    /**
     * @description Manages user-specific entries, accessible only to admins.
     * @path /users/{userId}/entries/{entryId}
     * @allow (get, list, create, update, delete) An admin can perform any operation.
     * @deny (get, list, create, update, delete) A non-admin user cannot perform any operation.
     * @principle Role-based access control.
     */
    match /users/{userId}/entries/{entryId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // --- Suppliers collection ---
    /**
     * @description Manages supplier information, accessible only to admins.
     * @path /suppliers/{supplierId}
     * @allow (get, list, create, update, delete) An admin can perform any operation.
     * @deny (get, list, create, update, delete) A non-admin user cannot perform any operation.
     * @principle Role-based access control.
     */
    match /suppliers/{supplierId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // --- Categories collection ---
    /**
     * @description Manages category information, accessible only to admins.
     * @path /categories/{categoryId}
     * @allow (get, list, create, update, delete) An admin can perform any operation.
     * @deny (get, list, create, update, delete) A non-admin user cannot perform any operation.
     * @principle Role-based access control.
     */
    match /categories/{categoryId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // --- Sales entries collection ---
    /**
     * @description Manages sales entries, publicly readable, createable by signed in user, but only modifiable by admins.
     * @path /sales_entries/{entryId}
     * @allow (get, list) Any signed-in user can read.
     * @allow (create) Any signed-in user can create.
     * @allow (update, delete) Only admins can modify.
     * @deny (update, delete) A non-admin user cannot modify.
     * @principle Role-based access control for writes, public read access.
     */
    match /sales_entries/{entryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // --- Transactions collection ---
    /**
     * @description Manages transaction data, accessible only to admins.
     * @path /transactions/{transactionId}
     * @allow (get, list, create, update, delete) An admin can perform any operation.
     * @deny (get, list, create, update, delete) A non-admin user cannot perform any operation.
     * @principle Role-based access control.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}