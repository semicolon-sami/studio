/**
 * @fileoverview Firestore Security Rules for the Tarpaulin Manager app.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of ownership-based access for user-specific data and role-based access for administrative functions.
 * Sales entries are publicly readable, but only admins can modify them. User entries are strictly private to the owning user.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user.
 * - /roles_admin/{userId}: Indicates admin privileges. Document existence grants admin status.
 * - /users/{userId}/entries/{entryId}: Stores user-specific entries, accessible only to the owning user.
 * - /suppliers/{supplierId}: Stores supplier information, publicly readable but admin-writeable.
 * - /categories/{categoryId}: Stores categories, publicly readable but admin-writeable.
 * - /sales_entries/{entryId}: Stores sales entries. Any signed-in user can create, but only admins can modify.
 *
 * Key Security Decisions:
 * - Users can only access their own data under /users/{userId} and its subcollections.
 * - Admin privileges are determined by the existence of a document in /roles_admin/{userId}.
 * - Public read access is granted to /suppliers and /categories, but write access is restricted to admins.
 * - Listing of user entries is restricted to the owning user.
 * - Anyone who is signed in can create a sales entry.
 *
 * Denormalization for Authorization:
 * The existence of a document at `/roles_admin/{userId}` grants admin privileges. This avoids the need to read the user document to determine admin status, improving performance and security.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user's UID matches the {userId} path parameter.
     * @deny (get, create, update, delete, list) if the user's UID does not match the {userId} path parameter.
     * @principle Enforces user-ownership: only the authenticated user can access their own profile.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants admin privileges to users with a document in this collection.
     * @path /roles_admin/{userId}
     * @allow (get, create, update, delete) if the user's UID matches the {userId} path parameter and request is authenticated.
     * @deny (get, create, update, delete) if the user's UID does not match the {userId} path parameter.
     * @principle Role-based access control: the existence of a document grants admin privileges.
     */
    match /roles_admin/{userId} {
      function isAdmin(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isAdmin(userId);
      allow list: if false;
      allow create: if isAdmin(userId);
      allow update: if isAdmin(userId);
      allow delete: if isAdmin(userId);
    }

    /**
     * @description Allows users to read and write their own entries.
     * @path /users/{userId}/entries/{entryId}
     * @allow (get, create, update, delete, list) if the user's UID matches the {userId} path parameter.
     * @deny (get, create, update, delete, list) if the user's UID does not match the {userId} path parameter.
     * @principle Enforces path-based ownership: only the authenticated user can access their own entries.
     */
    match /users/{userId}/entries/{entryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
        
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to suppliers, but restricts write access to admins.
     * @path /suppliers/{supplierId}
     * @allow (get, list) to all users.
     * @allow (create, update, delete) only to admins.
     * @deny (create, update, delete) to non-admins.
     * @principle Public read, admin-only write: balances open access with controlled modification.
     */
    match /suppliers/{supplierId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      
      function isExistingAdmin() {
        return isAdmin() && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isExistingAdmin();
      allow delete: if isSignedIn() && isExistingAdmin();
    }

    /**
     * @description Allows public read access to categories, but restricts write access to admins.
     * @path /categories/{categoryId}
     * @allow (get, list) to all users.
     * @allow (create, update, delete) only to admins.
     * @deny (create, update, delete) to non-admins.
     * @principle Public read, admin-only write: balances open access with controlled modification.
     */
    match /categories/{categoryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
      
      function isExistingAdmin() {
        return isAdmin() && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isExistingAdmin();
      allow delete: if isSignedIn() && isExistingAdmin();
    }

    /**
     * @description Allows any authenticated user to create sales entries, but only admins can modify them.
     * @path /sales_entries/{entryId}
     * @allow (get, list) only to admins.
     * @allow (create) to any signed-in user.
     * @allow (update, delete) only to admins.
     * @deny (update, delete) to non-admins.
     * @principle Allows workers to create entries, but ensures admin control over modification and deletion.
     */
    match /sales_entries/{entryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }
        
      function isExistingAdmin() {
        return isAdmin() && resource != null;
      }

      allow get, list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isSignedIn() && isExistingAdmin();
      allow delete: if isSignedIn() && isExistingAdmin();
    }
  }
}