/**
 * @fileOverview Firestore Security Rules for the Tarpaulin Manager app.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data while providing public read access to shared resources and role-based access for administrative functions. Authorization decisions are made independently, relying on path-based checks and denormalized data, rather than expensive `get()` calls.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile data, accessible only to the owning user.
 * - `/roles_admin/{userId}`: Presence of a document indicates admin status for the user.
 * - `/users/{userId}/entries/{entryId}`: Stores user-specific entries (purchases, sales, expenses), accessible only to the owning user.
 * - `/suppliers/{supplierId}`: Stores supplier information, publicly readable, but write-protected for admins only.
 * - `/categories/{categoryId}`: Stores categories for suppliers, publicly readable, but write-protected for admins only.
 * - `/sales_entries/{entryId}`: Stores sales entries. Accessible to all authenticated users for creation, but restricted to admins for modification.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied.
 * - Admin privileges are determined by the presence of a document in `/roles_admin/{userId}`.
 * - Data validation is relaxed during the prototyping phase, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the presence of a document in `/roles_admin/{userId}`, avoiding the need to read the User document.
 * - User entries are secured via path-based ownership, eliminating the need for `get()` calls.
 *
 * Structural Segregation:
 * - User-specific entries are stored under the `/users/{userId}` collection, ensuring clear ownership and simplifying security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows authenticated users to read and write their own user profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user's UID matches the document ID.
     * @deny (get, create, update, delete) if the user's UID does not match the document ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Grants admin privileges to users who have a document at this location.
     * @path /roles_admin/{userId}
     * @allow (get, create, update, delete) if true, effectively granting admin status.
     * @deny (get, create, update, delete) if false.
     * @principle Grants admin role based on document existence.
     */
    match /roles_admin/{userId} {
      allow get: if request.auth != null && request.auth.uid == userId;
      allow list: if false;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Allows the owner to read and write their own entries.
     * @path /users/{userId}/entries/{entryId}
     * @allow (get, create, update, delete) if the user's UID matches the document's user ID.
     * @deny (get, create, update, delete) if the user's UID does not match the document's user ID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/entries/{entryId} {

      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // disable list for security. Can be enabled if needed, but may expose data
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to suppliers, but restricts write access to admins.
     * @path /suppliers/{supplierId}
     * @allow (get, list) if true, allowing public read access.
     * @allow (create, update, delete) if isAdmin(), restricting write access to admins.
     * @deny (create, update, delete) if not isAdmin().
     * @principle Public read, admin-only writes.
     */
    match /suppliers/{supplierId} {

      function isSignedIn() {
          return request.auth != null;
      }

      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows public read access to categories, but restricts write access to admins.
     * @path /categories/{categoryId}
     * @allow (get, list) if true, allowing public read access.
     * @allow (create, update, delete) if isAdmin(), restricting write access to admins.
     * @deny (create, update, delete) if not isAdmin().
     * @principle Public read, admin-only writes.
     */
    match /categories/{categoryId} {

      function isSignedIn() {
          return request.auth != null;
      }

      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows any authenticated user to create sales entries, but restricts modification to admins.
     * @path /sales_entries/{entryId}
     * @allow create if the user is signed in.
     * @allow (get, list, update, delete) if the user is an admin.
     * @deny (update, delete) if the user is not an admin.
     * @principle Allows all authenticated users to create, but restricts modification to admins.
     */
    match /sales_entries/{entryId} {

      function isSignedIn() {
          return request.auth != null;
      }

      function isAdmin() {
        return request.auth != null && exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin(); //Admin can list
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}