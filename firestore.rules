/**
 * @description This ruleset enforces a user-ownership model for user profiles and entries, with role-based access for suppliers, categories, and sales entries. Admin privileges are determined by the existence of a document in the `roles_admin` collection.
 * @dataStructure
 *   - /users/{userId}: Stores user profiles; only the user can read/write their own profile.
 *   - /roles_admin/{userId}: Existence of a document grants admin privileges to the user.
 *   - /users/{userId}/entries/{entryId}: Stores entries for each user; only the user can read/write their own entries.
 *   - /suppliers/{supplierId}: Stores supplier information; public read access, but only admins can create, update, or delete.
 *   - /categories/{categoryId}: Stores categories for suppliers; public read access, but only admins can create, update, or delete.
 *   - /sales_entries/{entryId}: Stores sales entries; any authenticated user can create, but only admins can read, update, or delete.
 * @keySecurityDecisions
 *   - Admin privileges are determined by the presence of a document in the `/roles_admin/{userId}` collection, eliminating the need for `get()` calls to user documents.
 *   - User entries are secured via path-based ownership, ensuring that only the owner can access them.
 *   - Listing of other users' entries is not permitted.
 * @denormalizationForAuthorization
 *   - Admin status is determined by the existence of a document in `/roles_admin/{userId}`, avoiding `get()` calls.
 *   - Entries are stored under user-specific paths (`/users/{userId}/entries/{entryId}`) to simplify ownership checks.
 * @structuralSegregation
 *   - Publicly readable data (suppliers, categories) is separated from private user data (user profiles, entries).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - An authenticated user can create their own profile.
     * @allow (get, update, delete) - An authenticated user can read, update, or delete their own profile.
     * @deny (create) - A user cannot create a profile for another user.
     * @deny (get, update, delete) - A user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /databases/{database}/documents/roles_admin/{userId}
     * @allow (create) - Anyone can create an admin role.
     * @allow (get) - Anyone can read an admin role.
     * @allow (update) - Anyone can update an admin role.
     * @allow (delete) - Anyone can delete an admin role.
     * @principle Determines admin status based on document existence.
     */
    match /roles_admin/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Controls access to user-specific entry data.
     * @path /databases/{database}/documents/users/{userId}/entries/{entryId}
     * @allow (create, get, update, delete) - An authenticated user can create, read, update, and delete their own entries.
     * @deny (create, get, update, delete) - A user cannot create, read, update, or delete entries belonging to another user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/entries/{entryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to supplier information.
     * @path /databases/{database}/documents/suppliers/{supplierId}
     * @allow (get, list) - Public read access to supplier information.
     * @allow (create, update, delete) - Only admins can create, update, or delete supplier information.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete supplier information.
     * @principle Allows public read access with admin-only write access.
     */
    match /suppliers/{supplierId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to category information.
     * @path /databases/{database}/documents/categories/{categoryId}
     * @allow (get, list) - Public read access to category information.
     * @allow (create, update, delete) - Only admins can create, update, or delete category information.
     * @deny (create, update, delete) - Non-admins cannot create, update, or delete category information.
     * @principle Allows public read access with admin-only write access.
     */
    match /categories/{categoryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Controls access to sales entry information.
     * @path /databases/{database}/documents/sales_entries/{entryId}
     * @allow (create) - Any authenticated user can create sales entries.
     * @allow (get, list, update, delete) - Only admins can read, update, or delete sales entries.
     * @deny (get, list, update, delete) - Non-admins cannot read, update, or delete sales entries.
     * @principle Allows public creation with admin-only management.
     */
    match /sales_entries/{entryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow create: if isSignedIn();
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}