/**
 * @file Firestore Security Rules for Tarpaulin Manager App
 * @core_philosophy This ruleset enforces a combination of user-ownership for personal data (entries)
 * and role-based access control (admin privileges) for shared data (suppliers, categories, sales entries).
 * It prioritizes security through authorization independence, avoiding costly `get()` calls in rules.
 * @data_structure
 * - `/users/{userId}`: Stores user profiles, accessible only to the user themselves.
 * - `/roles_admin/{userId}`: Indicates admin privileges; document existence grants admin access.
 * - `/users/{userId}/entries/{entryId}`: Stores user-specific entries, accessible only to the user.
 * - `/suppliers/{supplierId}`: Stores supplier information, publicly readable but admin-writeable.
 * - `/categories/{categoryId}`: Stores category information, publicly readable but admin-writeable.
 * - `/sales_entries/{entryId}`: Stores sales entries, creatable by any signed-in user, but only modifiable by admins.
 * @key_security_decisions
 * - Admin privileges are determined by the presence of a document in the `/roles_admin/{userId}` collection,
 *   not by querying user profiles.
 * - User listing is disallowed for security.
 * - Public read access is granted to the `suppliers` and `categories` collections to simplify data access
 *   for all users.
 * @denormalization_for_authorization Admin status is determined by the existence of a document in the `/roles_admin/{userId}` collection.
 * @structural_segregation Publicly readable data (suppliers, categories) is stored in separate top-level collections
 *   from user-specific data (entries).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update) if request.auth.uid == userId
     * @deny (get, create, update) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Determines admin privileges based on document existence.
     * @path /roles_admin/{userId}
     * @allow get, create, update, delete: if isAdmin()
     * @deny get, create, update, delete: if !isAdmin(userId)
     * @principle Grants admin access based on document existence in the roles_admin collection.
     */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false; // Listing admin roles is not permitted.
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows users to manage their own entries.
     * @path /users/{userId}/entries/{entryId}
     * @allow (get, create, update) if request.auth.uid == userId
     * @deny (get, create, update) if request.auth.uid != userId
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/entries/{entryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to supplier information, but restricts write access to admins only.
     * @path /suppliers/{supplierId}
     * @allow get, list: if true
     * @allow create, update, delete: if isAdmin()
     * @principle Allows public read access with owner-only writes.
     */
    match /suppliers/{supplierId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to category information, but restricts write access to admins only.
     * @path /categories/{categoryId}
     * @allow get, list: if true
     * @allow create, update, delete: if isAdmin()
     * @principle Allows public read access with owner-only writes.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows any signed-in user to create sales entries, but only admins can modify them.
     * @path /sales_entries/{entryId}
     * @allow create: if isSignedIn()
     * @allow get, list, update, delete: if isAdmin()
     * @principle Grants create access to any signed-in user but limits modification to admins.
     */
    match /sales_entries/{entryId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() ;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }

  // Helper functions

  /**
   * @description Checks if the user is signed in.
   * @return True if the user is authenticated, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the requesting user is the owner of the document.
   * @param userId The user ID to compare against the request's auth UID.
   * @return True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  /**
   * @description Checks if the requesting user is an existing owner of the document.
   * @param userId The user ID to compare against the request's auth UID.
   * @return True if the user is the owner and the document exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/entries/$(entryId));
  }

  /**
   * @description Checks if the user has admin privileges.
   * @return True if the user has admin privileges, false otherwise.
   */
  function isAdmin() {
    return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}