/**
 * @fileoverview Firestore Security Rules for the Tarpaulin Business App.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for most data, with role-based access control for sensitive collections like 'transactions'.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Accessible only to the user themselves.
 * - /roles/{roleId}: Stores role definitions (e.g., Admin, Worker). Publicly readable.
 * - /categories/{categoryId}: Stores entry categories. Publicly readable.
 * - /entries/{entryId}: Stores transaction entries. Ownership is determined by the 'userId' field within the document.
 * - /transactions/{transactionId}: Stores aggregated transaction data. Only accessible to 'Admin' roles.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Roles and Categories are publicly readable to allow the app to function without authentication for basic data.
 * - Transactions are restricted to administrators only.
 * - Default security posture for ambiguous relationships is to deny access.
 *
 * Denormalization for Authorization:
 * - The `entries` collection denormalizes the `userId` to allow for efficient ownership checks without requiring additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @deny (create) Authenticated user cannot create a profile for another user.
     * @allow (get, list, update, delete) Authenticated user can access their own profile.
     * @deny (get, list, update, delete) Authenticated user cannot access other user profiles.
     * @principle Enforces user ownership: Only the authenticated user can read/write their own data.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to role definitions.
     * @path /roles/{roleId}
     * @allow (get, list) Any user can read role definitions.
     * @deny (create, update, delete) No user can create, update, or delete roles.
     * @principle Roles are publicly readable but not writable by clients.
     */
    match /roles/{roleId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to categories.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read categories.
     * @deny (create, update, delete) No user can create, update, or delete categories.
     * @principle Categories are publicly readable but not writable by clients.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to transaction entries.
     * @path /entries/{entryId}
     * @allow (create) Authenticated user can create new entry with their userId
     * @deny (create) Authenticated user cannot create an entry with another user's userId
     * @allow (get, list, update, delete) Authenticated user can access their own entries.
     * @deny (get, list, update, delete) Authenticated user cannot access other user's entries.
     * @principle Enforces user ownership: Only the authenticated user can read/write their own data.
     */
    match /entries/{entryId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if isSignedIn() && isOwner(request.auth.uid);
      allow update: if isSignedIn() && isOwner(resource.data.userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to aggregated transaction summaries.
     * @path /transactions/{transactionId}
     * @allow (get, list) Only admin users can read transaction data.
     * @deny (get, list) Non-admin users cannot read transaction data.
     * @deny (create, update, delete) No user can create, update, or delete transactions.
     * @principle Transactions are restricted to administrators only.
     */
    match /transactions/{transactionId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      // TODO: Implement proper role lookup.  This is a placeholder.
      return true;
      // return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}