/**
 * @fileoverview Firestore Security Rules for Tarpaulin Business App.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for entries, categories and users, and a read-only model for roles.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. 'userId' must match the Firebase Auth UID.
 * - /roles/{roleId}: Stores predefined roles (e.g., Admin, Worker). Read-only for all authenticated users.
 * - /categories/{categoryId}: Stores entry categories.  Accessible to all authenticated users.
 * - /entries/{entryId}: Stores individual entries (purchases, sales, expenses). 'userId' field within each entry must match the authenticated user's UID.
 *
 * Key Security Decisions:
 * - Users can only create, update, or delete their own entries and their user document.
 * - Users cannot list all users.
 * - Roles are read-only and accessible to all authenticated users.
 * - Categories are accessible to all authenticated users.
 *
 * Denormalization for Authorization:
 * - The `entries` collection denormalizes the `userId` field. This is CRUCIAL for security.
 *   It allows us to verify ownership of an entry directly within the `entries` rule without needing
 *   to perform additional `get()` operations on the `users` collection. This approach is more secure,
 *   faster, and cheaper.
 *
 * Structural Segregation:
 * - User-specific data (entries) is stored in a top-level collection (`entries`) instead of a subcollection under `/users/{userId}`.
 *   This simplifies queries and improves performance for common operations like listing all entries across all users while still ensuring authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the userId and the resource exists.
     * @param {string} userId The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) If the user is creating their own document (userId matches auth.uid).
     * @allow (get) If the user is requesting their own document (userId matches auth.uid).
     * @allow (update) If the user is updating their own document (userId matches auth.uid).
     * @allow (delete) If the user is deleting their own document (userId matches auth.uid).
     * @deny (list) Listing all users is not allowed.
     * @deny (create) If the user attempts to create a document for another user (userId does not match auth.uid).
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /roles/{roleId} collection.
     * @path /roles/{roleId}
     * @allow (get, list) All authenticated users can read roles.
     * @deny (create, update, delete) No one can create, update, or delete roles (read-only).
     * @principle Roles are predefined and read-only.
     */
    match /roles/{roleId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Rules for the /categories/{categoryId} collection.
     * @path /categories/{categoryId}
     * @allow (get, list) All authenticated users can read categories.
     * @allow (create) Any authenticated user can create categories.
     * @allow (update) Any authenticated user can update categories.
     * @allow (delete) Any authenticated user can delete categories.
     */
    match /categories/{categoryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Rules for the /entries/{entryId} collection.
     * @path /entries/{entryId}
     * @allow (get, list) All authenticated users can read entries.
     * @allow (create) If the entry's userId matches the authenticated user's UID.
     * @allow (update) If the entry's userId matches the authenticated user's UID and the entry exists.
     * @allow (delete) If the entry's userId matches the authenticated user's UID and the entry exists.
     * @deny (create) If the entry's userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes.
     */
    match /entries/{entryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}