/**
 * @fileoverview Firestore Security Rules for the Tarpaulin Business App.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for most data, with role-based access control for specific collections.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /roles/{roleId}: Stores role definitions (Admin, Worker). Read-only for all authenticated users.
 * - /categories/{categoryId}: Stores entry categories. Read-only for all authenticated users.
 * - /entries/{entryId}: Stores individual entries, with a denormalized `userId` for ownership.
 * - /transactions/{transactionId}: Stores aggregated transaction data, accessible only to admins.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Roles and Categories are readable by all authenticated users but only manageable by admins.
 * - Transactions are strictly admin-only.
 * - Data validation is relaxed (prototyping mode) except for fields that are essential for authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * The `entries` collection denormalizes the `userId` field from the `users` collection to enable fast, secure ownership checks without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Restricts access to user profiles. Only the user themselves can read or write their profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a profile at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile at /users/user123.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows any authenticated user to read roles, but restricts writes to admins only.
     * @path /roles/{roleId}
     * @allow (get, list) - Any signed-in user can read role definitions.
     * @deny (create, update, delete) - Only admins can create, update, or delete roles.
     * @principle Read-only access for authenticated users, write access restricted to admins.
     */
    match /roles/{roleId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any authenticated user to read categories, but restricts writes to admins only.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any signed-in user can read category definitions.
     * @deny (create, update, delete) - Only admins can create, update, or delete categories.
     * @principle Read-only access for authenticated users, write access restricted to admins.
     */
    match /categories/{categoryId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Allows users to create, read, update and delete their own entries.
     * @path /entries/{entryId}
     * @allow (create) - User with UID 'user123' can create an entry where entry.userId == 'user123'.
     * @allow (get, list) - User with UID 'user123' can read entries they own.
     * @allow (update, delete) - User with UID 'user123' can update/delete their existing entry.
     * @deny (create) - User with UID 'user456' cannot create an entry where entry.userId != 'user456'.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete an entry they don't own.
     * @principle Enforces document ownership for entries.
     */
    match /entries/{entryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

       /**
        * @description Restricts access to transactions. Only admins can read, create, update, or delete transaction data.
        * @path /transactions/{transactionId}
        * @deny (get, list, create, update, delete) - Non-admin users cannot access transaction data.
        * @principle Admin-only access for transaction data.
        */
    match /transactions/{transactionId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Restricts access to sales_entries. Only authenticated users can read and create sales_entries
     * @path /sales_entries/{salesEntryId}
     * @allow (get, list, create) - Authenticated users can access sales_entries data.
     * @deny (update, delete) - Non-admin users cannot update/delete sales_entries data.
     * @principle authenticated-only access for sales_entries data.
     */
        match /sales_entries/{salesEntryId} {
          allow get, list: if isSignedIn();
          allow create: if isSignedIn();
          allow update, delete: if false;
        }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}