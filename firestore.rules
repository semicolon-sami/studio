/**
 * @file Overview
 * This ruleset enforces a combination of user-ownership and role-based access control for the Tarpaulin Manager app.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Admin roles are granted by the existence of a document in `/roles_admin/{userId}`.
 * - User-specific entries are stored under `/users/{userId}/entries/{entryId}`.
 * - Suppliers and Categories are stored under `/suppliers/{supplierId}` and `/categories/{categoryId}`, respectively, and are publicly readable but admin-modifiable.
 * - Sales entries are stored under `/sales_entries/{entryId}`, and can be created by any authenticated user but only managed by admins.
 *
 * Key Security Decisions:
 * - Strict user-ownership for user profiles and entries.
 * - Admin privileges are determined by the presence of a document in the `/roles_admin/{userId}` collection, avoiding costly `get()` calls.
 * - Public read access for suppliers and categories, with restricted write access to admins only.
 * - Secure `list` operations are supported through path-based ownership and role-based access control.
 *
 * Denormalization for Authorization:
 * - Admin status is determined by the existence of a document in `/roles_admin/{userId}`. This avoids having to read the user document to check for admin privileges.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create, update, get) User 'WlfCFBPzc0egM7tmsu6DqEulp503' can create/update/get their own profile.
     * @deny (create, update, get) User 'anotherUserId' cannot create/update/get the profile of 'WlfCFBPzc0egM7tmsu6DqEulp503'.
     * @deny delete No user can delete a profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Grants admin privileges based on the existence of a document.
     * @path /roles_admin/{userId}
     * @allow create An admin with ID 'adminUserId' can create a role.
     * @deny create A non-admin user cannot create a role.
     * @allow get Any user can check for the existence of the admin role document (but not read its contents).
     * @allow delete An admin can delete their admin role document.
     * @deny list Listing the documents is denied for security.
     * @deny update Updating an admin document is not allowed.
     * @principle Grants admin privileges based on document existence.
     */
    match /roles_admin/{userId} {
      function isAdmin() {
        return request.auth.uid == userId;
      }

      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Manages entries for each user. Only the user with ID {userId} can read/write entries at this path.
     * @path /users/{userId}/entries/{entryId}
     * @allow (create, update, get) User 'WlfCFBPzc0egM7tmsu6DqEulp503' can create/update/get their own entry.
     * @deny (create, update, get) User 'anotherUserId' cannot create/update/get the entry of 'WlfCFBPzc0egM7tmsu6DqEulp503'.
     * @deny delete No user can delete entries created by others.
     * @principle Enforces document ownership for entries.
     */
    match /users/{userId}/entries/{entryId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Manages supplier information. Public read access, but only admins can create, update, or delete.
     * @path /suppliers/{supplierId}
     * @allow get Any user can get supplier info.
     * @allow list Any user can list suppliers.
     * @allow (create, update, delete) Only admins can create/update/delete suppliers.
     * @principle Restricts write access to admins for supplier management.
     */
    match /suppliers/{supplierId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages categories for suppliers. Public read access, but only admins can create, update, or delete.
     * @path /categories/{categoryId}
     * @allow get Any user can get category info.
     * @allow list Any user can list categories.
     * @allow (create, update, delete) Only admins can create/update/delete categories.
     * @principle Restricts write access to admins for category management.
     */
    match /categories/{categoryId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Manages sales entries. Entries can be created by any authenticated user, but only admins can modify them.
     * @path /sales_entries/{entryId}
     * @allow create Any authenticated user can create a sales entry.
     * @allow get Any user can get sales entry info.
     * @allow list Any user can list sales entries.
     * @allow (update, delete) Only admins can update/delete sales entries.
     * @principle Restricts update and delete access to admins for sales entries.
     */
    match /sales_entries/{entryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}